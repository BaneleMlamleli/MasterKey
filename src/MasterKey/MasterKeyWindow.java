/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MasterKey;

/**
 *
 * @author Shaun
 */
import java.awt.HeadlessException;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.*;

public class MasterKeyWindow extends javax.swing.JFrame {

    //defining global variables
    Connection connect = null;
    ResultSet result = null;
    Statement stmnt = null;
    PreparedStatement prepStmnt = null;
    EncryptDecrypt objEncryptDecrypt = new EncryptDecrypt(); //creating an object of the class EncryptDecrypt

    /**
     * Creates new form LoginWindow
     */
    public MasterKeyWindow() {
        initComponents();

        try {
            /*
                The below code will load the ucanaccess drivers, jar files and connect to the database.
                It will also check the database in the specified directory
             */
            connect = DriverManager.getConnection("jdbc:ucanaccess://H:\\Cipher\\PROGRAMMING\\Java\\Projects\\MasterKey\\src\\MasterKey.accdb");
            System.out.println("Driver successfully loaded in the MasterKey GUI");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Unable to load database driver\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        /*
            The below code will load all the names from the database
            into the dropdown box(combox)
         */
        try {
            cmbNames.removeAllItems();  //removes all the items in the dropdown box
            stmnt = connect.createStatement();
            ResultSet selectNamesFromCredentialsTable = stmnt.executeQuery("SELECT Name FROM Credentials"); //read all names from Credentials database
            ResultSet selectUsenameFromLoginTable = stmnt.executeQuery("SELECT Username FROM Login"); //reads all usernames from Login database
            while (selectNamesFromCredentialsTable.next()) {
                cmbNames.addItem(selectNamesFromCredentialsTable.getString("Name")); //adds all the data from the Credentials database
            }
            while (selectUsenameFromLoginTable.next()) {
                cmbUpdateUsername.addItem(selectUsenameFromLoginTable.getString(1)); //adds all the data from the Login database
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No data was read for combobox\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jMenuItem3 = new javax.swing.JMenuItem();
        jLabel15 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtURL = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        logo = new javax.swing.JLabel();
        btnSave = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtConfirmPassword = new javax.swing.JPasswordField();
        txtPassword = new javax.swing.JPasswordField();
        btnClearAllFields1 = new javax.swing.JButton();
        backGround1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnDisplayAll = new javax.swing.JButton();
        table = new javax.swing.JScrollPane();
        tblDisplayData = new javax.swing.JTable();
        backGround4 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        logo1 = new javax.swing.JLabel();
        cmbNames = new javax.swing.JComboBox<>();
        cmbUpdateUsername = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtUpdateURL = new javax.swing.JTextField();
        txtOldPassword = new javax.swing.JTextField();
        txtUpdateName = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txtOldMasterKey = new javax.swing.JTextField();
        txtNewPassword = new javax.swing.JPasswordField();
        txtConfirmNewPassword = new javax.swing.JPasswordField();
        btnUpdateMasterKey = new javax.swing.JLabel();
        btnUpdateCredentials = new javax.swing.JLabel();
        groupSearch = new javax.swing.JLabel();
        txtNewMasterKey = new javax.swing.JPasswordField();
        txtConfirmNewMasterKey = new javax.swing.JPasswordField();
        groupUpdate = new javax.swing.JLabel();
        backGround2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MasterKey/background.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel8.setText("jLabel8");

        jLabel9.setText("jLabel9");

        jMenuItem3.setText("jMenuItem3");

        jLabel15.setText("jLabel15");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Master Key");
        setMinimumSize(new java.awt.Dimension(500, 500));
        setResizable(false);

        jTabbedPane1.setMinimumSize(new java.awt.Dimension(539, 465));

        jPanel2.setLayout(null);

        jLabel5.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 153, 153));
        jLabel5.setText("Password*");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(10, 190, 80, 21);

        jLabel6.setFont(new java.awt.Font("Comic Sans MS", 1, 10)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 153, 153));
        jLabel6.setText("Mandatory fields *");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(10, 400, 100, 21);

        txtURL.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        txtURL.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtURL.setToolTipText("enter URL. e.g., www.google.com");
        txtURL.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        txtURL.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtURL.setMargin(new java.awt.Insets(6, 6, 6, 6));
        jPanel2.add(txtURL);
        txtURL.setBounds(240, 130, 280, 37);

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 153));
        jLabel4.setText("Name*");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(10, 90, 60, 21);

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MasterKey/logo_SimpleText_1.png"))); // NOI18N
        jPanel2.add(logo);
        logo.setBounds(42, 20, 370, 42);

        btnSave.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnSave.setForeground(new java.awt.Color(0, 153, 153));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MasterKey/SaveBtn.png"))); // NOI18N
        btnSave.setToolTipText("click to save details");
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveMouseClicked(evt);
            }
        });
        jPanel2.add(btnSave);
        btnSave.setBounds(100, 280, 320, 90);

        txtName.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        txtName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtName.setToolTipText("enter name associated to the URL. e.g., Google or Facebook");
        txtName.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        txtName.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtName.setMargin(new java.awt.Insets(6, 6, 6, 6));
        jPanel2.add(txtName);
        txtName.setBounds(240, 80, 280, 37);

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 153));
        jLabel3.setText("Uniform Resource Locator (URL)");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(10, 140, 230, 21);

        jLabel10.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 153, 153));
        jLabel10.setText("Confirm Password*");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(10, 240, 140, 21);

        txtConfirmPassword.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        txtConfirmPassword.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtConfirmPassword.setToolTipText("re-enter password associated to the entered name");
        txtConfirmPassword.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        txtConfirmPassword.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtConfirmPassword.setMargin(new java.awt.Insets(6, 6, 6, 6));
        jPanel2.add(txtConfirmPassword);
        txtConfirmPassword.setBounds(240, 230, 280, 40);

        txtPassword.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        txtPassword.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtPassword.setToolTipText("enter password associated to the entered name");
        txtPassword.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        txtPassword.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtPassword.setMargin(new java.awt.Insets(6, 6, 6, 6));
        jPanel2.add(txtPassword);
        txtPassword.setBounds(240, 180, 280, 40);

        btnClearAllFields1.setBackground(new java.awt.Color(204, 255, 255));
        btnClearAllFields1.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        btnClearAllFields1.setForeground(new java.awt.Color(0, 153, 153));
        btnClearAllFields1.setText("CLEAR ALL FIELDS");
        btnClearAllFields1.setToolTipText("clear all input fields");
        btnClearAllFields1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        btnClearAllFields1.setBorderPainted(false);
        btnClearAllFields1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnClearAllFields1MouseClicked(evt);
            }
        });
        btnClearAllFields1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAllFields1ActionPerformed(evt);
            }
        });
        jPanel2.add(btnClearAllFields1);
        btnClearAllFields1.setBounds(170, 370, 180, 30);

        backGround1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        backGround1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MasterKey/background.png"))); // NOI18N
        backGround1.setText("backGround");
        backGround1.setMinimumSize(new java.awt.Dimension(539, 400));
        jPanel2.add(backGround1);
        backGround1.setBounds(0, 0, 540, 430);

        jTabbedPane1.addTab("REGISTER CREDENTIALS", jPanel2);

        jPanel4.setLayout(null);

        jLabel7.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 153, 153));
        jLabel7.setText("Enter a phrase");
        jPanel4.add(jLabel7);
        jLabel7.setBounds(10, 80, 89, 18);

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MasterKey/logo_SimpleText_1.png"))); // NOI18N
        jPanel4.add(jLabel14);
        jLabel14.setBounds(42, 20, 370, 42);
        jPanel4.add(jSeparator1);
        jSeparator1.setBounds(10, 120, 510, 20);

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MasterKey/search.png"))); // NOI18N
        btnSearch.setToolTipText("click to search for the entered phrase");
        btnSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSearchMouseClicked(evt);
            }
        });
        jPanel4.add(btnSearch);
        btnSearch.setBounds(360, 60, 160, 60);

        txtSearch.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        txtSearch.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSearch.setToolTipText("enter phrase you want to search");
        txtSearch.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        txtSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtSearch.setMargin(new java.awt.Insets(6, 6, 6, 6));
        jPanel4.add(txtSearch);
        txtSearch.setBounds(120, 70, 240, 30);

        btnDisplayAll.setBackground(new java.awt.Color(204, 255, 255));
        btnDisplayAll.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        btnDisplayAll.setForeground(new java.awt.Color(0, 153, 153));
        btnDisplayAll.setText("DISPLAY ALL CREDENTIALS");
        btnDisplayAll.setToolTipText("display all the credentials in the Database");
        btnDisplayAll.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        btnDisplayAll.setBorderPainted(false);
        btnDisplayAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDisplayAllMouseClicked(evt);
            }
        });
        btnDisplayAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayAllActionPerformed(evt);
            }
        });
        jPanel4.add(btnDisplayAll);
        btnDisplayAll.setBounds(10, 130, 510, 30);

        tblDisplayData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Password", "Old Password", "URL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setViewportView(tblDisplayData);

        jPanel4.add(table);
        table.setBounds(10, 170, 510, 250);

        backGround4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        backGround4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MasterKey/background.png"))); // NOI18N
        backGround4.setText("backGround");
        backGround4.setMinimumSize(new java.awt.Dimension(539, 400));
        jPanel4.add(backGround4);
        backGround4.setBounds(0, 0, 540, 430);

        jTabbedPane1.addTab("DISPLAY CREDENTIALS", jPanel4);

        jPanel6.setLayout(null);

        logo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MasterKey/logo_SimpleText_1.png"))); // NOI18N
        jPanel6.add(logo1);
        logo1.setBounds(42, 20, 370, 42);

        cmbNames.setToolTipText("select name to update");
        cmbNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbNamesActionPerformed(evt);
            }
        });
        jPanel6.add(cmbNames);
        cmbNames.setBounds(30, 70, 370, 30);

        cmbUpdateUsername.setToolTipText("select username to update");
        cmbUpdateUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbUpdateUsernameActionPerformed(evt);
            }
        });
        jPanel6.add(cmbUpdateUsername);
        cmbUpdateUsername.setBounds(30, 280, 370, 30);

        jLabel16.setFont(new java.awt.Font("Comic Sans MS", 1, 13)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 153, 153));
        jLabel16.setText("Confirm Password");
        jPanel6.add(jLabel16);
        jLabel16.setBounds(30, 230, 120, 19);

        jLabel17.setFont(new java.awt.Font("Comic Sans MS", 1, 13)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 153, 153));
        jLabel17.setText("New Password");
        jPanel6.add(jLabel17);
        jLabel17.setBounds(30, 200, 100, 19);

        jLabel11.setFont(new java.awt.Font("Comic Sans MS", 1, 13)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 153, 153));
        jLabel11.setText("Password");
        jPanel6.add(jLabel11);
        jLabel11.setBounds(30, 170, 70, 19);

        jLabel12.setFont(new java.awt.Font("Comic Sans MS", 1, 13)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 153, 153));
        jLabel12.setText("URL");
        jPanel6.add(jLabel12);
        jLabel12.setBounds(30, 140, 50, 19);

        jLabel13.setFont(new java.awt.Font("Comic Sans MS", 1, 13)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 153, 153));
        jLabel13.setText("Name");
        jPanel6.add(jLabel13);
        jLabel13.setBounds(30, 110, 50, 19);

        txtUpdateURL.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        txtUpdateURL.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtUpdateURL.setToolTipText("Uniform Resource Locator(URL)");
        txtUpdateURL.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        txtUpdateURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUpdateURLActionPerformed(evt);
            }
        });
        jPanel6.add(txtUpdateURL);
        txtUpdateURL.setBounds(160, 140, 240, 20);

        txtOldPassword.setEditable(false);
        txtOldPassword.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        txtOldPassword.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtOldPassword.setToolTipText("old password");
        txtOldPassword.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jPanel6.add(txtOldPassword);
        txtOldPassword.setBounds(160, 170, 240, 20);

        txtUpdateName.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        txtUpdateName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtUpdateName.setToolTipText("name to be updated");
        txtUpdateName.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jPanel6.add(txtUpdateName);
        txtUpdateName.setBounds(160, 110, 240, 20);

        jLabel19.setFont(new java.awt.Font("Comic Sans MS", 1, 13)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 153, 153));
        jLabel19.setText("Old Master Key");
        jPanel6.add(jLabel19);
        jLabel19.setBounds(30, 320, 110, 19);

        jLabel20.setFont(new java.awt.Font("Comic Sans MS", 1, 13)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 153, 153));
        jLabel20.setText("New Master Key");
        jPanel6.add(jLabel20);
        jLabel20.setBounds(30, 350, 110, 19);

        jLabel21.setFont(new java.awt.Font("Comic Sans MS", 1, 13)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 153, 153));
        jLabel21.setText("Confirm Master Key");
        jPanel6.add(jLabel21);
        jLabel21.setBounds(30, 380, 130, 19);

        txtOldMasterKey.setEditable(false);
        txtOldMasterKey.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        txtOldMasterKey.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtOldMasterKey.setToolTipText("Old master key");
        txtOldMasterKey.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jPanel6.add(txtOldMasterKey);
        txtOldMasterKey.setBounds(160, 320, 240, 20);

        txtNewPassword.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        txtNewPassword.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNewPassword.setToolTipText("Enter new password key");
        txtNewPassword.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jPanel6.add(txtNewPassword);
        txtNewPassword.setBounds(160, 200, 240, 20);

        txtConfirmNewPassword.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        txtConfirmNewPassword.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtConfirmNewPassword.setToolTipText("re-enter new password");
        txtConfirmNewPassword.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jPanel6.add(txtConfirmNewPassword);
        txtConfirmNewPassword.setBounds(160, 230, 240, 20);

        btnUpdateMasterKey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MasterKey/updateBtn2.png"))); // NOI18N
        btnUpdateMasterKey.setToolTipText("click to update master key");
        btnUpdateMasterKey.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUpdateMasterKeyMouseClicked(evt);
            }
        });
        jPanel6.add(btnUpdateMasterKey);
        btnUpdateMasterKey.setBounds(410, 280, 70, 130);

        btnUpdateCredentials.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MasterKey/updateBtn2.png"))); // NOI18N
        btnUpdateCredentials.setToolTipText("click to update credentials");
        btnUpdateCredentials.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUpdateCredentialsMouseClicked(evt);
            }
        });
        jPanel6.add(btnUpdateCredentials);
        btnUpdateCredentials.setBounds(410, 100, 70, 130);

        groupSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MasterKey/searchGroup_1.png"))); // NOI18N
        jPanel6.add(groupSearch);
        groupSearch.setBounds(0, 50, 530, 220);

        txtNewMasterKey.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        txtNewMasterKey.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNewMasterKey.setToolTipText("Enter new master key");
        txtNewMasterKey.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jPanel6.add(txtNewMasterKey);
        txtNewMasterKey.setBounds(160, 350, 240, 20);

        txtConfirmNewMasterKey.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        txtConfirmNewMasterKey.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtConfirmNewMasterKey.setToolTipText("re-enter new master key");
        txtConfirmNewMasterKey.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jPanel6.add(txtConfirmNewMasterKey);
        txtConfirmNewMasterKey.setBounds(160, 380, 240, 20);

        groupUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MasterKey/updateGroup.png"))); // NOI18N
        jPanel6.add(groupUpdate);
        groupUpdate.setBounds(0, 260, 530, 170);

        backGround2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        backGround2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MasterKey/background.png"))); // NOI18N
        backGround2.setText("backGround");
        backGround2.setMinimumSize(new java.awt.Dimension(539, 400));
        jPanel6.add(backGround2);
        backGround2.setBounds(0, 0, 540, 430);

        jTabbedPane1.addTab("UPDATE CREDENTIALS", jPanel6);

        jMenuBar1.setBackground(new java.awt.Color(204, 255, 255));
        jMenuBar1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jMenuBar1.setForeground(new java.awt.Color(204, 255, 255));

        jMenu1.setText("File");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });

        jMenuItem2.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jMenuItem2.setText("Exit");
        jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem2MouseClicked(evt);
            }
        });
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItem5.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jMenuItem5.setText("Master Key");
        jMenuItem5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem5MouseClicked(evt);
            }
        });
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem1.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jMenuItem1.setText("About");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseClicked(evt);
            }
        });
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Back to login window");

        jMenuItem4.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jMenuItem4.setText("<- Back");
        jMenuItem4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem4MouseClicked(evt);
            }
        });
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 455, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem2MouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2MouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1MouseClicked

    private void jMenuItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseClicked
        // TODO add your handling code here:
        /*JOptionPane.showMessageDialog(null,"Programmer, Banele Mlamleli\n\nMaster Key is a small program that stores crucial"+
            " data in a secured Database. This program uses a specific Ciphertonium algorith to encrypt and decrypt data","About",
            JOptionPane.INFORMATION_MESSAGE);*/
    }//GEN-LAST:event_jMenuItem1MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // The below code will display the 'About' information of the entire program
        JOptionPane.showMessageDialog(null, "Programmer, Banele Mlamleli\n\nMaster Key is a small program that\nstores crucial "
                + "data in a secured Database.\nThis program uses a specific Ciphertonium\nalgorithm to encrypt and decrypt data.", "About",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void txtUpdateURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUpdateURLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUpdateURLActionPerformed

    private void jMenuItem4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem4MouseClicked
        // Close the current window and opens the login window
        this.dispose(); //close the MasterKey window
        new LoginWindow().setVisible(true); //opens the Login windows
    }//GEN-LAST:event_jMenuItem4MouseClicked

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // Close the current window and opens the login window
        this.dispose(); //close the MasterKey window
        new LoginWindow().setVisible(true); //opens the Login windows
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void btnSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseClicked
        // The below code will read details entered by user and register them in the database
        String name = txtName.getText();
        String url = txtURL.getText();
        String password = txtPassword.getText();

        if (name.length() != 0) { //checks length of name if it's not equal to zero(0)
            if (url.length() != 0) { //checks length of url if it's not equal to zero(0)
                if (password.length() >= 4) { //checks lenght of password if it's greater than four(4)
                    if (password.equals(txtConfirmPassword.getText())) {  //checks if password and password confirmation is the same
                        try {
                            stmnt = connect.createStatement();
                            ResultSet checkName = stmnt.executeQuery("SELECT Name FROM Credentials"); //read all usernames from Database
                            while (checkName.next()) {
                                if (!checkName.getString("Name").equals(name)) {
                                    /*if the name does not exist, no padding will be done.
                                 User will be registered as per the details provided*/
                                    System.out.println("Name is unique");
                                    //display a pane will the entered details for confirmation
                                    int confirmOption = JOptionPane.showConfirmDialog(null, "Confirm details,\n\n" + "Name:  " + name + "\nPassword: " + password + "\nURL:   " + url + "\n\nProceed with these details?\n",
                                            "Confirmation", JOptionPane.YES_NO_OPTION);
                                    if (confirmOption == 0) {
                                        String registerCredentials = "INSERT INTO Credentials(Name, Password, Old_Password,URL) VALUES(?, ?, ?, ?)";
                                        prepStmnt = connect.prepareStatement(registerCredentials);
                                        prepStmnt.setString(1, name);
                                        prepStmnt.setString(2, objEncryptDecrypt.getEncryption(password));
                                        prepStmnt.setString(3, objEncryptDecrypt.getEncryption(password)); //duplicated to prevent errors when reading data from the database at a later stage
                                        prepStmnt.setString(4, url);
                                        prepStmnt.executeUpdate();
                                        JOptionPane.showMessageDialog(null, "Successfully registered credentials");
                                        break;
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Thank you, Please correct the details again.", "Correction", JOptionPane.INFORMATION_MESSAGE);
                                        break;
                                    }

                                } else //Name will be padded as it exist already
                                {
                                    if (checkName.getString("Name").equals(name)) { //checks if the username entered exist or not
                                        int padNumber = (int) (Math.random());   //random number that will be used to pad the already existing username
                                        //display a pane will the entered details for confirmation
                                        int confirmOption = JOptionPane.showConfirmDialog(null, "Confirm details,\n\n" + "Name:" + "\t\t\t" + name + "\nPassword:" + "\t\t" + password + "\nURL:" + "\t\t\t" + url + "\n\n" + "Proceed with these details?\n",
                                                "Confirmation", JOptionPane.YES_NO_OPTION);
                                        if (confirmOption == 0) {
                                            JOptionPane.showMessageDialog(null, "Please note!!\nName will be padded by '" + padNumber + "' as it exists already.");
                                            String registerCredentials = "INSERT INTO Credentials(Name, Password, Old_Password,URL) VALUES(?, ?, ?, ?)";
                                            prepStmnt = connect.prepareStatement(registerCredentials);
                                            prepStmnt.setString(1, name + padNumber);
                                            prepStmnt.setString(2, objEncryptDecrypt.getEncryption(password));
                                            prepStmnt.setString(3, objEncryptDecrypt.getEncryption(password)); //duplicated to prevent errors when reading data from the database at a later stage
                                            prepStmnt.setString(4, url);
                                            prepStmnt.executeUpdate();
                                            JOptionPane.showMessageDialog(null, "Successfully registered credentials");
                                            break;
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Thank you, Please correct the details again.", "Correction", JOptionPane.INFORMATION_MESSAGE);
                                        }
                                    }
                                }
                            }
                        } catch (HeadlessException | SQLException error) {
                            System.out.println("Unable to register provided credentials\n" + error.getMessage());
                            JOptionPane.showMessageDialog(null, "Unable to register provided credentials\n" + error.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Password is not the same");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Password cannot be less than four(4) characters");
                }
            } else {
                JOptionPane.showMessageDialog(null, "URL field is empty");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Name field is empty");
        }
    }//GEN-LAST:event_btnSaveMouseClicked

    private void btnDisplayAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayAllActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDisplayAllActionPerformed

    private void btnDisplayAllMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDisplayAllMouseClicked
        //The below code will display all the credentials that are stored in the Database
        DefaultTableModel model = (DefaultTableModel) tblDisplayData.getModel();
        try {
            stmnt = connect.createStatement();
            ResultSet displayAll = stmnt.executeQuery("SELECT * FROM Credentials"); //read all data from Database
            while (displayAll.next()) {
                model.addRow(new Object[]{displayAll.getString("Name"), objEncryptDecrypt.getDecryption(displayAll.getString("Password")),
                    objEncryptDecrypt.getDecryption(displayAll.getString("Old_Password")), displayAll.getString("URL")});
            }
        } catch (Exception error) {
            System.out.println("Unable to read credentials from the database\n" + error.getMessage());
            JOptionPane.showMessageDialog(null, "Unable to read credentials from the database\n" + error.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDisplayAllMouseClicked

    private void btnSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseClicked
        /*
            The below code will search through the database using the phrase
            or argument entered by the user
         */
        DefaultTableModel model = (DefaultTableModel) tblDisplayData.getModel();
        try {
            stmnt = connect.createStatement();
            ResultSet searchArgument = stmnt.executeQuery("SELECT * FROM Credentials WHERE Name LIKE '%" + txtSearch.getText() + "%'");
            while (searchArgument.next()) {
                if (searchArgument.getString("Name").contains(txtSearch.getText())) {
                    model.addRow(new Object[]{searchArgument.getString(1), objEncryptDecrypt.getDecryption(searchArgument.getString(2)),
                        objEncryptDecrypt.getDecryption(searchArgument.getString(3)), searchArgument.getString(4)});
                } else {
                    JOptionPane.showMessageDialog(null, "No data was found based on the search phrase entered", "No data",
                            JOptionPane.PLAIN_MESSAGE);
                }
            }
        } catch (SQLException | HeadlessException error) {
            JOptionPane.showMessageDialog(null, "No data was found based on the phrase entered\n" + error.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSearchMouseClicked

    private void cmbNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbNamesActionPerformed
        /*
            The below code will select all the names in the database and display
            all the information related to the selected name in the dropdown box
         */

        //The below code will clear the entry fields
        txtUpdateName.setText("");
        txtUpdateURL.setText("");
        txtOldPassword.setText("");
        txtNewPassword.setText("");
        txtConfirmNewPassword.setText("");

        try {
            stmnt = connect.createStatement();
            ResultSet displaySelectField = stmnt.executeQuery("SELECT * FROM Credentials WHERE Name = '" + cmbNames.getSelectedItem().toString() + "'");
            while (displaySelectField.next()) {
                txtUpdateName.setText(displaySelectField.getString("Name"));
                txtOldPassword.setText(objEncryptDecrypt.getDecryption(displaySelectField.getString("Password")));
                txtUpdateURL.setText(displaySelectField.getString("URL"));
            }
        } catch (Exception error) {
            JOptionPane.showMessageDialog(null, "No data was selected or read\n" + error.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmbNamesActionPerformed

    private void btnUpdateCredentialsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateCredentialsMouseClicked
        /*
            The below code will update the credentials from the database with
            the newly provided credentials
         */
        String updateName = txtUpdateName.getText();
        String updateURL = txtUpdateURL.getText();
        String oldPassword = txtOldPassword.getText();
        String newPassword = txtNewPassword.getText();
        String confirmNewPassword = txtConfirmNewPassword.getText();
        try {
            if (updateName.length() > 0) {
                if (oldPassword.length() > 0) {
                    if (updateURL.length() > 0) {
                        if (newPassword.length() >= 4) {
                            if (confirmNewPassword.length() >= 4) {
                                if (newPassword.equals(confirmNewPassword)) {
                                    stmnt = connect.createStatement();
                                    String updateCredentials = "UPDATE Credentials "
                                            + "SET Name = ?, Password = ?, Old_Password = ?, URL = ? "
                                            + "WHERE Name = '" + cmbNames.getSelectedItem().toString() + "'";
                                    prepStmnt = connect.prepareStatement(updateCredentials);
                                    prepStmnt.setString(1, updateName);
                                    prepStmnt.setString(2, objEncryptDecrypt.getEncryption(confirmNewPassword));
                                    prepStmnt.setString(3, objEncryptDecrypt.getEncryption(oldPassword));
                                    prepStmnt.setString(4, updateURL);
                                    prepStmnt.executeUpdate();
                                    JOptionPane.showMessageDialog(null, "Successfully updated", "update", JOptionPane.PLAIN_MESSAGE);
                                } else {
                                    JOptionPane.showMessageDialog(null, "Passwords do not match", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "'Confirm New Password' field cannot be less than four(4) characters", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "'New Password' field cannot be less than four(4) characters", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "'URL' field cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "'Password' field cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "'Name' field cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception error) {
            JOptionPane.showMessageDialog(null, "No update was done\n" + error.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateCredentialsMouseClicked

    private void btnUpdateMasterKeyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateMasterKeyMouseClicked
        // The below code will update the login details of the specified username
        String newMasterKey = txtNewMasterKey.getText();
        String confirmMasterKey = txtConfirmNewMasterKey.getText();
        try {
            if (newMasterKey.length() > 4) {
                if (confirmMasterKey.length() > 4) {
                    if (newMasterKey.equals(confirmMasterKey)) {
                        stmnt = connect.createStatement();
                        String updateLogin = "UPDATE Login "
                                + "SET MasterKey = ?, Old_MasterKey = ? "
                                + "WHERE Username = '" + cmbUpdateUsername.getSelectedItem().toString() + "'";
                        prepStmnt = connect.prepareStatement(updateLogin);
                        prepStmnt.setString(2, objEncryptDecrypt.getEncryption(confirmMasterKey));
                        prepStmnt.setString(3, objEncryptDecrypt.getEncryption(txtOldMasterKey.getText()));
                        prepStmnt.executeUpdate();
                        JOptionPane.showMessageDialog(null, "Successfully updated", "update", JOptionPane.PLAIN_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Master Keys do not match", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "'Confirm New Master Key' field cannot have character less than four(4)", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "'New Master Key' field cannot have character less than four(4)", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException | HeadlessException error) {
            JOptionPane.showMessageDialog(null, "Error during database update\n" + error.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateMasterKeyMouseClicked

    private void cmbUpdateUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbUpdateUsernameActionPerformed
        /*
            The below code will select all the names in the database and display
            all the information related to the selected name in the dropdown box
         */

        //The below code will clear the entry fields
        txtOldMasterKey.setText("");
        txtNewMasterKey.setText("");;
        txtConfirmNewMasterKey.setText("");

        try {
            stmnt = connect.createStatement();
            ResultSet displaySelectUsernameField = stmnt.executeQuery("SELECT * FROM Login WHERE Username = '" + cmbUpdateUsername.getSelectedItem().toString() + "'");
            while (displaySelectUsernameField.next()) {
                txtOldMasterKey.setText(objEncryptDecrypt.getDecryption(displaySelectUsernameField.getString("Old_MasterKey")));
            }
        } catch (Exception error) {
            JOptionPane.showMessageDialog(null, "No data was selected or read\n" + error.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_cmbUpdateUsernameActionPerformed

    private void btnClearAllFields1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearAllFields1MouseClicked
        // TODO add your handling code here:
        txtName.setText("");
        txtURL.setText("");
        txtPassword.setText("");
        txtConfirmPassword.setText("");
    }//GEN-LAST:event_btnClearAllFields1MouseClicked

    private void btnClearAllFields1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAllFields1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnClearAllFields1ActionPerformed

    private void jMenuItem5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem5MouseClicked

    }//GEN-LAST:event_jMenuItem5MouseClicked

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // Display specific information about the entire program
        JOptionPane.showMessageDialog(null, "Product Version: 1.0 (Build 20172502)\n"
                + "Program Name: Master Key — Alpha\n"
                + "Java: 1.8.0_91; Java HotSpot(TM) Client VM 25.91-b14\n"
                + "Runtime: Java(TM) SE Runtime Environment 1.8.0_91-b14\n"
                + "System used: Windows 8 version 6.2 running on x86; Cp1252; en_ZA (nb)\n", "Master Key — Alpha", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backGround1;
    private javax.swing.JLabel backGround2;
    private javax.swing.JLabel backGround4;
    private javax.swing.JButton btnClearAllFields1;
    private javax.swing.JButton btnDisplayAll;
    private javax.swing.JLabel btnSave;
    private javax.swing.JLabel btnSearch;
    private javax.swing.JLabel btnUpdateCredentials;
    private javax.swing.JLabel btnUpdateMasterKey;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JComboBox<String> cmbNames;
    private javax.swing.JComboBox<String> cmbUpdateUsername;
    private javax.swing.JLabel groupSearch;
    private javax.swing.JLabel groupUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel logo;
    private javax.swing.JLabel logo1;
    private javax.swing.JScrollPane table;
    private javax.swing.JTable tblDisplayData;
    private javax.swing.JPasswordField txtConfirmNewMasterKey;
    private javax.swing.JPasswordField txtConfirmNewPassword;
    private javax.swing.JPasswordField txtConfirmPassword;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtNewMasterKey;
    private javax.swing.JPasswordField txtNewPassword;
    private javax.swing.JTextField txtOldMasterKey;
    private javax.swing.JTextField txtOldPassword;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtURL;
    private javax.swing.JTextField txtUpdateName;
    private javax.swing.JTextField txtUpdateURL;
    // End of variables declaration//GEN-END:variables
}
